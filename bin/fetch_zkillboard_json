#!/usr/bin/env php
<?php
/* Osmium
 * Copyright (C) 2013 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Osmium\CLI\FetchZKillboardJSON;

require __DIR__.'/../inc/root.php';

/* The zKillboard documentation doesn't say if the dates are in UTC,
 * but they probably are */
date_default_timezone_set('UTC');

$groupsq = \Osmium\Db\query(
	'SELECT DISTINCT groupid FROM osmium.invships ORDER BY groupid ASC'
);

/* Purge old kills */
\Osmium\Db\query_params('DELETE FROM osmium.recentkillsdna WHERE killtime < $1', array(time() - 7*86400));

\Osmium\Db\prepare('delkill', 'DELETE FROM recentkillsdna WHERE killid = $1');
\Osmium\Db\prepare(
	'inskill',
	'INSERT INTO recentkillsdna (killid, killtime, dna, groupdna, solarsystemid,
	characterid, charactername, corporationid, corporationname, allianceid, alliancename)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)'
);

while(true) {
	$groupids = array();
	for($i = 0; $i < 10; ++$i) {
		$gid = \Osmium\Db\fetch_row($groupsq);
		if($gid === false) break;
		$groupids[] = (int)$gid[0];
	}

	if($groupids === array()) break;
	$groupids = implode(',', $groupids);

	$cutoff = (int)\Osmium\Db\fetch_row(\Osmium\Db\query(
		"SELECT max(killtime) FROM recentkillsdna rkd
		JOIN osmium.invships ON invships.typeid::text = split_part(rkd.dna, ':', 1)
		WHERE invships.groupid IN ({$groupids})"
	))[0] - 3600;

	$now = time();
	$cutoff = max($cutoff, $now - 2 * 86400);
	$uri = null;

	do {
		$inserted = 0;
		$datetime = date('YmdHi', $cutoff);

		$prevuri = $uri;
		$json = zkillboard_api(
			$uri = "/groupID/{$groupids}/startTime/{$datetime}/orderDirection/asc/no-attackers/api-only/"
		);

		foreach($json as $k) {
			++$inserted;

			if(!isset($k['killID']) || $k['killID'] <= 0) {
				echo "k";
				continue;
			}

			$cutoff = $killtime = strtotime($k['killTime']);
			$dna = $k['victim']['shipTypeID'];

			foreach($k['items'] as $item) {
				$f = (int)$item['flag'];
				if(!(
					/* See invflags */
					($f >= 11 && $f <= 34) /* Low, medium, high slots */
					|| ($f >= 92 && $f <= 99) /* Rig slots */
					|| ($f >= 125 && $f <= 132) /* Subsystem slots */
					|| ($f === 87) /* Drone bay */
					|| ($f === 88) /* Booster */
					|| ($f === 89) /* Implant */
				)) {
					continue;
				}

				$typeid = (int)$item['typeID'];
				$qty = (int)$item['qtyDropped'] + (int)$item['qtyDestroyed'];
				if($qty === 0) continue;
				$dna .= ':'.$typeid.';'.$qty;
			}

			$dna .= '::';

			$dna = \Osmium\Fit\mangle_dna($dna);
			$gdna = \Osmium\Fit\uniquify_dna($dna);

			if($dna === false || $gdna === false) {
				echo "d";
				continue;
			}

			\Osmium\Db\execute('delkill', array($k['killID']));
			\Osmium\Db\execute(
				'inskill',
				array(
					$k['killID'],
					$killtime,
					$dna,
					$gdna,
					$k['solarSystemID'],
					$k['victim']['characterID'],
					$k['victim']['characterName'],
					$k['victim']['corporationID'],
					$k['victim']['corporationName'],
					$k['victim']['allianceID'] > 0 ? $k['victim']['allianceID'] : null,
					$k['victim']['allianceID'] > 0 ? $k['victim']['allianceName'] : null,
				)
			);

			echo ".";
		}

		echo "\n";

	} while($inserted > 0 && $prevuri !== $uri);
}





function zkillboard_api($call) {
	$uri = "https://zkillboard.com/api".$call;
	echo "Requesting {$uri} ";

	$json = \Osmium\State\get_cache($call, null, 'API_ZKB_');
	if($json !== null) {
		echo "c\n";
		return $json;
	}

	static $hashes = array();
	static $next_request_time = 0;
	static $retries = [ 0, 15, 30, 60, 60 ];

	$c = \Osmium\curl_init_branded();
	curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($c, CURLOPT_HEADER, 1);
	curl_setopt($c, CURLOPT_TIMEOUT, 60);
	curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 60);
	curl_setopt($c, CURLOPT_ENCODING, 'gzip');

	foreach($retries as $ret) {
		sleep($ret);
		usleep(max(1, ($next_request_time - microtime(true)) * 1e6));

		curl_setopt($c, CURLOPT_URL, $uri);
		$reply = curl_exec($c);

		if($reply === false) {
			echo curl_error($c).' ';
			continue;
		}

		list($header, $body) = explode("\r\n\r\n", $reply, 2);
		if(preg_match("%^X-Time-Between-Req: (.+)$%m", $header, $match)) {
			$wait = $match[1] + 1;
		} else {
			$wait = 10;
		}

		$next_request_time = microtime(true) + $wait;
		$json = json_decode($body, true);
		if(json_last_error() !== JSON_ERROR_NONE) {
			echo "j";
			continue;
		}

		if(!is_array($json)) {
			echo "e";
			continue;
		}

		$hash = sha1(serialize($json));
		unset($hashes[$call]);
		if(($index = array_search($hash, $hashes, true)) !== false) {
			echo "\n";
			fwrite(STDERR, "Calls {$index} and {$call} returned the same dataset! Giving up.\n");
			die(666);
		}
		$hashes[$call] = $hash;

		echo ".";

		\Osmium\State\put_cache($call, $json, 3500, 'API_ZKB_');
		echo "\n";
		return $json;
	}

	echo "\n";
	fwrite(STDERR, "Could not request {$uri} after ".count($retries)." attempts, giving up.\n");
	die(1);
}
