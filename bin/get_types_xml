#!/usr/bin/env php
<?php
/* Osmium
 * Copyright (C) 2012, 2013, 2014, 2015 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

require __DIR__.'/../inc/root.php';

$q = \Osmium\Db\query(
	'SELECT tsd.typeid, tsd.typename, parenttypename, category, subcategory,
	tsd.groupname, marketgroupname, metagroupid, metalevel
	FROM osmium.typessearchdata tsd
	JOIN eve.invtypes it ON it.typeid = tsd.typeid AND it.published = true'
	);

$xml = new \Osmium\DOM\Document();
$docset = $xml->appendChild($xml->element('sphinx:docset'));
$schema = $docset->appendCreate('sphinx:schema');

$autofields = [ 'typename', 'parenttypename', 'groupname', 'marketgroupname' ];

foreach($autofields as $f) {
	$schema->appendCreate('sphinx:field', [ 'name' => $f ]);
}

$schema->appendCreate('sphinx:field', [ 'name' => 'synonyms' ]);
$schema->appendCreate('sphinx:field', [ 'name' => 'parentsynonyms' ]);

$schema->appendCreate('sphinx:attr', [
	'name' => 'mg',
	'type' => 'int',
	'bits' => '32',
]);
$schema->appendCreate('sphinx:attr', [
	'name' => 'ml',
	'type' => 'int',
	'bits' => '32',
]);

while($row = \Osmium\Db\fetch_assoc($q)) {
	$document = $docset->appendCreate('sphinx:document', [
		'id' => $row['typeid'],
	]);

	foreach($autofields as $f) {
		$document->appendCreate($f, (string)$row[$f]);
	}

	$document->appendCreate('synonyms', get_synonyms($row['typename']));
	$document->appendCreate('parentsynonyms', get_synonyms($row['parenttypename']));

	$document->appendCreate('mg', (string)$row['metagroupid']);
	$document->appendCreate('ml', (string)$row['metalevel']);
}

$xml->save('php://output');
die();

function get_synonyms($name) {
	static $prefixes = array('Micro', 'Small', 'Medium', 'Large', 'X-Large');
	static $suffixes = array('I' => '1', 'II' => '2');
	static $factions = false;

	if(!$factions) {
		$faction = array();
		$deadspace = array();
		$officer = array();

		$q = \Osmium\Db\query('SELECT typename, metagroupid FROM osmium.invmodules WHERE metagroupid IN (4,5,6)');
		while($r = \Osmium\Db\fetch_assoc($q)) {
			$k = explode(' ', $r['typename']);
			$one = $k[0];
			$two = $k[0].' '.$k[1];

			if($r['metagroupid'] == 4) {
				@$faction[$two]++;
				@$faction[$one]++;
			} else if($r['metagroupid'] == 5) {
				$officer[$two] = true;
			} else if($r['metagroupid'] == 6) {
				$deadspace[$two] = true;
			} else continue;
		}

		$skipnext = false;
		foreach($faction as $f => $count) {
			if($skipnext) {
				$skipnext = false;
				continue;
			}

			if($count < 8) continue;

			$prefixes[] = $f;
			$skipnext = true;
		}

		$prefixes = array_merge($prefixes, array_keys($officer), array_keys($deadspace));
		$factions = true;
	}

	$origname = $name;
	$actualprefixes = array('' => '');
	$actualsuffixes = array('' => '');

	while(true) {
		foreach($prefixes as $prefix => $replacement) {
			if(is_int($prefix)) {
				$prefix = $replacement;
				$replacement = preg_replace('%[^A-Z]%', '', $replacement);
			}

			$k = $prefix.' ';
			if(substr($name, 0, strlen($k)) === $k) {
				$actualprefixes[$prefix] = $replacement;
				$name = substr($name, strlen($k));
				continue 2;
			}
		}
		break;
	}

	while(true) {
		foreach($suffixes as $suffix => $replacement) {
			if(is_int($suffix)) {
				$suffix = $replacement;
				$replacement = preg_replace('%[^A-Z]%', '', $replacement);
			}

			$k = ' '.$suffix;
			if(substr($name, strlen($name) - strlen($k)) === $k) {
				$actualsuffixes[$suffix] = $replacement;
				$name = substr($name, 0, strlen($name) - strlen($k));
				continue 2;
			}
		}
		break;
	}

	$name = str_replace(
		array(
			'Autocannon',
			'AutoCannon',
			'Afterburner',
			'Microwarpdrive',
			'Low-grade',
			'Smartbomb',
			),
		array(
			'AC',
			'AC',
			'AB',
			'MWD',
			'LG',
			'SB',
			),
		$name);

	if(preg_match('%^(.*)(([1-9][0-9]*)(mn|mm))(.*)$%i', $name, $matches)) {
		$a = preg_replace('%[^A-Z0-9]%', '', $matches[1])
			.' '.$matches[2].' '
			.preg_replace('%[^A-Z0-9]%', '', $matches[5]);
	} else {
		$a = preg_replace('%[^A-Z0-9]%', '', $name);
	}

	$ret = array();

	foreach($actualprefixes as $p) {
		$ret[] = $p;
	}

	foreach($actualprefixes as $p) {
		foreach($actualsuffixes as $s) {
			$ret[] = $p.$a.$s;
		}
	}

	foreach($actualsuffixes as $s) {
		$ret[] = $s;
	}

	$ret[] = preg_replace('%[^A-Z0-9]%', '', $origname);
	$ret[] = preg_replace('%[^A-Z]%', '', $origname);

	return implode(' ', array_unique(array_filter($ret)));
}