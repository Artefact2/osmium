#!/usr/bin/env php
<?php
/* Osmium
 * Copyright (C) 2013, 2015 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Osmium\CLI\CacheTopKills;

require __DIR__.'/../inc/root.php';
require \Osmium\ROOT.'/inc/ajax-common.php';

echo "Purging old kills…\n";
\Osmium\Db\query_params(
	'DELETE FROM osmium.recentkillsdna WHERE killtime < $1',
	array(time() - 7*86400)
);

echo "Caching groupdna…\n";

$q = \Osmium\Db\query_params(
	'SELECT count(characterid), groupdna, sum(exp(-($1 - lastkill) / (2 * 86400))) AS score
	FROM (
	SELECT groupdna, max(killtime) AS lastkill, characterid FROM osmium.recentkillsdna GROUP BY groupdna, characterid
	) g
	GROUP BY groupdna
	ORDER BY score DESC',
	array(time())
);

$topkills = [ 'fotw' => [], 'doctrine' => [] ];
$fotwc = 0;
$doctrinec = 0;

$numrows = 10;
while($row = \Osmium\Db\fetch_assoc($q)) {
	if($fotwc >= 3 * $numrows & $doctrinec >= 2 * $numrows) break;

	$bestdna = \Osmium\Db\fetch_row(\Osmium\Db\query_params(
		'SELECT dna
		FROM osmium.recentkillsdna
		WHERE groupdna = $1
		GROUP BY dna
		ORDER BY count(DISTINCT characterid) DESC
		LIMIT 1',
		array($row['groupdna'])
	))[0];

	$fit = \Osmium\Fit\try_parse_fit_from_shipdna($bestdna, 'DNA', $err);
	if($fit === false) continue;
	$slots = \Osmium\AjaxCommon\get_slot_usage($fit);
	$emptyslots = 0;
	$totalslots = 0;
	foreach($slots as $type => $max) {
		$totalslots += $max;
		$emptyslots += ($max - (isset($fit['modules'][$type]) ? count($fit['modules'][$type]) : 0));
	}
	if($emptyslots >= ($totalslots >> 1)) {
		/* More than half of the slots are empty, assume this is a shitfit™ */
		continue;
	}

	/* Try and make the fit look good */

	/* Sort out drones by damage */
	$drones = array();

	foreach($fit['drones'] as $typeid => $d) {
		if($d['quantityinspace'] > 0) {
			$drones[$typeid] = [
				'damage' => \Osmium\Dogma\get_drone_attribute($fit, $typeid, 'damageMultiplier') * (
					\Osmium\Dogma\get_drone_attribute($fit, $typeid, 'emDamage')
					+ \Osmium\Dogma\get_drone_attribute($fit, $typeid, 'explosiveDamage')
					+ \Osmium\Dogma\get_drone_attribute($fit, $typeid, 'kineticDamage')
					+ \Osmium\Dogma\get_drone_attribute($fit, $typeid, 'thermalDamage')
				),
				'volume' => \Osmium\Fit\get_volume($typeid),
			];
		}

		foreach(array('bay', 'space') as $loc) {
			if(isset($d['quantityin'.$loc]) && $d['quantityin'.$loc] > 0) {
				\Osmium\Fit\remove_drone($fit, $typeid, $loc, $d['quantityin'.$loc]);
			}
		}
	}

	uasort($drones, function($x, $y) {
		$ret = $y['volume'] - $x['volume'];
		return $ret ?: ($y['damage'] - $x['damage']);
	});

	$scandidates = array(); /* Array([ typeid, quantity]) */
	$bcandidates = array(); /* Array([ typeid, quantity]) */

	foreach($drones as $typeid => $d) {
		$scandidates[] = [ $typeid, 3 ];
		$bcandidates[] = [ $typeid, 5 ];
	}

	foreach($drones as $typeid => $d) {
		$scandidates[] = [ $typeid, 1 ];
		$bcandidates[] = [ $typeid, 1 ];
	}

	foreach($scandidates as $i => $d) {
		list($typeid, $qty) = $d;
		\Osmium\Fit\add_drone_auto($fit, $typeid, 50);
		\Osmium\Fit\remove_drone($fit, $typeid, 'bay', $fit['drones'][$typeid]['quantityinbay']);
		if(isset($fit['drones'][$typeid]) && $fit['drones'][$typeid]['quantityinspace'] < $qty) {
			\Osmium\Fit\remove_drone($fit, $typeid, 'space', $fit['drones'][$typeid]['quantityinspace']);
		} else if(isset($fit['drones'][$typeid]) && $qty > 1) {
			unset($bcandidates[$i]);
		}
	}

	$capacity = \Osmium\Dogma\get_ship_attribute($fit, 'droneCapacity');
	do {
		$added = false;
		foreach($bcandidates as $d) {
			list($typeid, $qty) = $d;
			\Osmium\Fit\add_drone($fit, $typeid, $qty, 0);

			if(\Osmium\Fit\get_used_drone_capacity($fit) > $capacity) {
				\Osmium\Fit\remove_drone($fit, $typeid, 'bay', $qty);
				continue;
			}

			$added = true;
		}
	} while($added === true);

	$entry = array(
		'dna' => \Osmium\Fit\export_to_dna($fit),
		'count' => (int)$row['count'],
		'tags' => $fit['metadata']['tags'],
		'dps' => 0,
	);

	$ia = \Osmium\Fit\get_interesting_attributes($fit);
	$entry['dps'] += \Osmium\Fit\get_damage_from_turrets($fit, $ia)[0];
	$entry['dps'] += \Osmium\Fit\get_damage_from_missiles($fit, $ia)[0];
	$entry['dps'] += \Osmium\Fit\get_damage_from_smartbombs($fit, $ia)[0];
	$entry['dps'] += \Osmium\Fit\get_damage_from_drones($fit, $ia)[0];

	$entry['ehp'] = \Osmium\Fit\get_ehp_and_resists(
		$fit, [ 'em' => .25, 'explosive' => .25, 'kinetic' => .25, 'thermal' => .25 ]
	)['ehp']['avg'];

	$missing = array();
	$prices = \Osmium\Fit\get_estimated_price($fit, $missing);
	$entry['price'] = $missing === array() ? array_sum($prices) : null;

	if($doctrinec < 2 * $numrows) {
		$alliancesq = \Osmium\Db\query_params(
			'SELECT count(DISTINCT characterid), allianceid, alliancename
			FROM osmium.recentkillsdna
			WHERE groupdna = $1 AND allianceid > 0
			GROUP BY allianceid, alliancename
			ORDER BY count DESC
			LIMIT 4',
			array($row['groupdna'])
		);

		$alliances = array();
		$proportion = 0;
		while($proportion < .5 && $a = \Osmium\Db\fetch_row($alliancesq)) {
			$alliances[] = $a;
			$proportion += $a[0] / $row['count'];
		}

		if($proportion >= .5) {
			$entry['alliances'] = $alliances;
			$topkills['doctrine'][] = $entry;
			++$doctrinec;
			continue;
		}
	}

	if($fotwc < 3 * $numrows) {
		$topkills['fotw'][] = $entry;
		++$fotwc;
		continue;
	}
}

\Osmium\State\put_cache('top_kills', $topkills, 86400);
\Osmium\State\invalidate_cache_memory('fotw', 'Main_');
\Osmium\State\invalidate_cache_memory('doctrines', 'Main_');
